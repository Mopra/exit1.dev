rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check collection rules
    match /checks/{checkId} {
      // Allow read/write only if user is authenticated and owns the website
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user owns the website and provides valid data
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user owns the website
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Webhook collection rules
    match /webhooks/{webhookId} {
      // Allow read/write only if user is authenticated and owns the webhook
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'enabled', 'events', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user owns the webhook and provides valid data
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user owns the webhook
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Check history collection rules
    match /checkHistory/{historyId} {
      // Allow read only if user is authenticated and owns the website
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['websiteId', 'userId', 'timestamp', 'status', 'createdAt']) &&
        // Validate websiteId
        request.resource.data.websiteId is string &&
        // Validate userId
        request.resource.data.userId is string &&
        // Validate timestamp
        request.resource.data.timestamp is number &&
        // Validate status
        request.resource.data.status in ['online', 'offline', 'unknown'] &&
        // Validate createdAt
        request.resource.data.createdAt is number;
      
      // Allow delete if user owns the history entry
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Check aggregations collection rules
    match /checkAggregations/{aggregationId} {
      // Allow read only if user is authenticated and owns the website
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create/update if user is authenticated and provides valid data
      allow create, update: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['websiteId', 'userId', 'hourTimestamp', 'totalChecks', 'onlineChecks', 'offlineChecks', 'averageResponseTime', 'uptimePercentage', 'lastStatus', 'createdAt', 'updatedAt']) &&
        // Validate websiteId
        request.resource.data.websiteId is string &&
        // Validate userId
        request.resource.data.userId is string &&
        // Validate hourTimestamp
        request.resource.data.hourTimestamp is number &&
        // Validate counts
        request.resource.data.totalChecks is number &&
        request.resource.data.onlineChecks is number &&
        request.resource.data.offlineChecks is number &&
        // Validate response time
        request.resource.data.averageResponseTime is number &&
        // Validate uptime percentage
        request.resource.data.uptimePercentage is number &&
        // Validate status
        request.resource.data.lastStatus in ['online', 'offline', 'unknown'] &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow delete if user owns the aggregation
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 