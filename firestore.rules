rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Website collection rules
    match /websites/{websiteId} {
      // Allow read/write only if user is authenticated and owns the website
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user owns the website and provides valid data
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user owns the website
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Webhook collection rules
    match /webhooks/{webhookId} {
      // Allow read/write only if user is authenticated and owns the webhook
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'enabled', 'events', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user owns the webhook and provides valid data
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user owns the webhook
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 