rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Check collection rules
    match /checks/{checkId} {
      // Allow read/write only if user is authenticated
      allow read, write: if request.auth != null;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user is authenticated and provides valid data
      allow update: if request.auth != null &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user is authenticated
      allow delete: if request.auth != null;
    }
    
    // Webhook collection rules
    match /webhooks/{webhookId} {
      // Allow read/write only if user is authenticated
      allow read, write: if request.auth != null;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null &&
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'name', 'userId', 'enabled', 'events', 'createdAt', 'updatedAt']) &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate timestamps
        request.resource.data.createdAt is number &&
        request.resource.data.updatedAt is number;
      
      // Allow update if user is authenticated and provides valid data
      allow update: if request.auth != null &&
        // Validate URL format
        request.resource.data.url is string &&
        request.resource.data.url.matches('^https?://.+') &&
        // Validate name
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 100 &&
        // Validate enabled flag
        request.resource.data.enabled is bool &&
        // Validate events array
        request.resource.data.events is list &&
        request.resource.data.events.size() > 0 &&
        request.resource.data.events.size() <= 10 &&
        // Validate updated timestamp
        request.resource.data.updatedAt is number;
      
      // Allow delete if user is authenticated
      allow delete: if request.auth != null;
    }
    
    // Check history subcollection rules (under checks/{checkId}/history/{historyId})
    match /checks/{checkId}/history/{historyId} {
      // Allow read only if user is authenticated
      allow read: if request.auth != null;
      
      // Allow create/update/delete by the system (no user validation needed for subcollections)
      allow create, update, delete: if true;
    }
    
    // API Keys collection rules
    match /apiKeys/{apiKeyId} {
      // Allow read/write only if user is authenticated
      allow read, write: if request.auth != null;
      
      // Allow create if user is authenticated and provides valid data
      allow create: if request.auth != null &&
        // Validate required fields
        request.resource.data.keys().hasAll(['userId', 'hash', 'prefix', 'last4', 'enabled', 'createdAt']) &&
        // Validate user ID matches authenticated user
        request.resource.data.userId == request.auth.uid &&
        // Validate hash is string
        request.resource.data.hash is string &&
        // Validate prefix is string
        request.resource.data.prefix is string &&
        // Validate last4 is string
        request.resource.data.last4 is string &&
        // Validate enabled is boolean
        request.resource.data.enabled is bool &&
        // Validate timestamps
        request.resource.data.createdAt is number;
      
      // Allow update if user is authenticated and provides valid data
      allow update: if request.auth != null &&
        // Validate enabled is boolean if provided
        (request.resource.data.enabled == null || request.resource.data.enabled is bool) &&
        // Validate lastUsedAt is number if provided
        (request.resource.data.lastUsedAt == null || request.resource.data.lastUsedAt is number);
      
      // Allow delete if user is authenticated
      allow delete: if request.auth != null;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 